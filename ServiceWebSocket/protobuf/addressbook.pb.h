// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef PROTOBUF_addressbook_2eproto__INCLUDED
#define PROTOBUF_addressbook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_addressbook_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsData_Person_PhoneNumberImpl();
void InitDefaultsData_Person_PhoneNumber();
void InitDefaultsData_PersonImpl();
void InitDefaultsData_Person();
void InitDefaultsData_AddressBookImpl();
void InitDefaultsData_AddressBook();
void InitDefaultsDataImpl();
void InitDefaultsData();
inline void InitDefaults() {
  InitDefaultsData_Person_PhoneNumber();
  InitDefaultsData_Person();
  InitDefaultsData_AddressBook();
  InitDefaultsData();
}
}  // namespace protobuf_addressbook_2eproto
namespace tutorial {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Data_AddressBook;
class Data_AddressBookDefaultTypeInternal;
extern Data_AddressBookDefaultTypeInternal _Data_AddressBook_default_instance_;
class Data_Person;
class Data_PersonDefaultTypeInternal;
extern Data_PersonDefaultTypeInternal _Data_Person_default_instance_;
class Data_Person_PhoneNumber;
class Data_Person_PhoneNumberDefaultTypeInternal;
extern Data_Person_PhoneNumberDefaultTypeInternal _Data_Person_PhoneNumber_default_instance_;
}  // namespace tutorial
namespace tutorial {

enum Data_Person_PhoneType {
  Data_Person_PhoneType_MOBILE = 0,
  Data_Person_PhoneType_HOME = 1,
  Data_Person_PhoneType_WORK = 2,
  Data_Person_PhoneType_Data_Person_PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Data_Person_PhoneType_Data_Person_PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Data_Person_PhoneType_IsValid(int value);
const Data_Person_PhoneType Data_Person_PhoneType_PhoneType_MIN = Data_Person_PhoneType_MOBILE;
const Data_Person_PhoneType Data_Person_PhoneType_PhoneType_MAX = Data_Person_PhoneType_WORK;
const int Data_Person_PhoneType_PhoneType_ARRAYSIZE = Data_Person_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_Person_PhoneType_descriptor();
inline const ::std::string& Data_Person_PhoneType_Name(Data_Person_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_Person_PhoneType_descriptor(), value);
}
inline bool Data_Person_PhoneType_Parse(
    const ::std::string& name, Data_Person_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_Person_PhoneType>(
    Data_Person_PhoneType_descriptor(), name, value);
}
enum Data_DataType {
  Data_DataType_login = 0,
  Data_DataType_addPerson = 1,
  Data_DataType_Data_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Data_DataType_Data_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Data_DataType_IsValid(int value);
const Data_DataType Data_DataType_DataType_MIN = Data_DataType_login;
const Data_DataType Data_DataType_DataType_MAX = Data_DataType_addPerson;
const int Data_DataType_DataType_ARRAYSIZE = Data_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_DataType_descriptor();
inline const ::std::string& Data_DataType_Name(Data_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_DataType_descriptor(), value);
}
inline bool Data_DataType_Parse(
    const ::std::string& name, Data_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_DataType>(
    Data_DataType_descriptor(), name, value);
}
// ===================================================================

class Data_Person_PhoneNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Data.Person.PhoneNumber) */ {
 public:
  Data_Person_PhoneNumber();
  virtual ~Data_Person_PhoneNumber();

  Data_Person_PhoneNumber(const Data_Person_PhoneNumber& from);

  inline Data_Person_PhoneNumber& operator=(const Data_Person_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data_Person_PhoneNumber(Data_Person_PhoneNumber&& from) noexcept
    : Data_Person_PhoneNumber() {
    *this = ::std::move(from);
  }

  inline Data_Person_PhoneNumber& operator=(Data_Person_PhoneNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data_Person_PhoneNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data_Person_PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const Data_Person_PhoneNumber*>(
               &_Data_Person_PhoneNumber_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Data_Person_PhoneNumber* other);
  friend void swap(Data_Person_PhoneNumber& a, Data_Person_PhoneNumber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data_Person_PhoneNumber* New() const PROTOBUF_FINAL { return New(NULL); }

  Data_Person_PhoneNumber* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data_Person_PhoneNumber& from);
  void MergeFrom(const Data_Person_PhoneNumber& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data_Person_PhoneNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // .tutorial.Data.Person.PhoneType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::tutorial::Data_Person_PhoneType type() const;
  void set_type(::tutorial::Data_Person_PhoneType value);

  // @@protoc_insertion_point(class_scope:tutorial.Data.Person.PhoneNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_addressbook_2eproto::TableStruct;
  friend void ::protobuf_addressbook_2eproto::InitDefaultsData_Person_PhoneNumberImpl();
};
// -------------------------------------------------------------------

class Data_Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Data.Person) */ {
 public:
  Data_Person();
  virtual ~Data_Person();

  Data_Person(const Data_Person& from);

  inline Data_Person& operator=(const Data_Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data_Person(Data_Person&& from) noexcept
    : Data_Person() {
    *this = ::std::move(from);
  }

  inline Data_Person& operator=(Data_Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data_Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data_Person* internal_default_instance() {
    return reinterpret_cast<const Data_Person*>(
               &_Data_Person_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Data_Person* other);
  friend void swap(Data_Person& a, Data_Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data_Person* New() const PROTOBUF_FINAL { return New(NULL); }

  Data_Person* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data_Person& from);
  void MergeFrom(const Data_Person& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data_Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Data_Person_PhoneNumber PhoneNumber;

  typedef Data_Person_PhoneType PhoneType;
  static const PhoneType MOBILE =
    Data_Person_PhoneType_MOBILE;
  static const PhoneType HOME =
    Data_Person_PhoneType_HOME;
  static const PhoneType WORK =
    Data_Person_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return Data_Person_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    Data_Person_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    Data_Person_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    Data_Person_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return Data_Person_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return Data_Person_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return Data_Person_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // .tutorial.Data.Person.PhoneNumber phones = 4;
  bool has_phones() const;
  void clear_phones();
  static const int kPhonesFieldNumber = 4;
  const ::tutorial::Data_Person_PhoneNumber& phones() const;
  ::tutorial::Data_Person_PhoneNumber* release_phones();
  ::tutorial::Data_Person_PhoneNumber* mutable_phones();
  void set_allocated_phones(::tutorial::Data_Person_PhoneNumber* phones);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.Data.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::tutorial::Data_Person_PhoneNumber* phones_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_addressbook_2eproto::TableStruct;
  friend void ::protobuf_addressbook_2eproto::InitDefaultsData_PersonImpl();
};
// -------------------------------------------------------------------

class Data_AddressBook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Data.AddressBook) */ {
 public:
  Data_AddressBook();
  virtual ~Data_AddressBook();

  Data_AddressBook(const Data_AddressBook& from);

  inline Data_AddressBook& operator=(const Data_AddressBook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data_AddressBook(Data_AddressBook&& from) noexcept
    : Data_AddressBook() {
    *this = ::std::move(from);
  }

  inline Data_AddressBook& operator=(Data_AddressBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data_AddressBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data_AddressBook* internal_default_instance() {
    return reinterpret_cast<const Data_AddressBook*>(
               &_Data_AddressBook_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Data_AddressBook* other);
  friend void swap(Data_AddressBook& a, Data_AddressBook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data_AddressBook* New() const PROTOBUF_FINAL { return New(NULL); }

  Data_AddressBook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data_AddressBook& from);
  void MergeFrom(const Data_AddressBook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data_AddressBook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tutorial.Data.Person people = 1;
  bool has_people() const;
  void clear_people();
  static const int kPeopleFieldNumber = 1;
  const ::tutorial::Data_Person& people() const;
  ::tutorial::Data_Person* release_people();
  ::tutorial::Data_Person* mutable_people();
  void set_allocated_people(::tutorial::Data_Person* people);

  // @@protoc_insertion_point(class_scope:tutorial.Data.AddressBook)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tutorial::Data_Person* people_;
  mutable int _cached_size_;
  friend struct ::protobuf_addressbook_2eproto::TableStruct;
  friend void ::protobuf_addressbook_2eproto::InitDefaultsData_AddressBookImpl();
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Data_Person Person;
  typedef Data_AddressBook AddressBook;

  typedef Data_DataType DataType;
  static const DataType login =
    Data_DataType_login;
  static const DataType addPerson =
    Data_DataType_addPerson;
  static inline bool DataType_IsValid(int value) {
    return Data_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Data_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Data_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Data_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Data_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Data_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Data_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tutorial.Data.Person persons = 2;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 2;
  const ::tutorial::Data_Person& persons(int index) const;
  ::tutorial::Data_Person* mutable_persons(int index);
  ::tutorial::Data_Person* add_persons();
  ::google::protobuf::RepeatedPtrField< ::tutorial::Data_Person >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::Data_Person >&
      persons() const;

  // .tutorial.Data.DataType messagetype = 1;
  void clear_messagetype();
  static const int kMessagetypeFieldNumber = 1;
  ::tutorial::Data_DataType messagetype() const;
  void set_messagetype(::tutorial::Data_DataType value);

  // @@protoc_insertion_point(class_scope:tutorial.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::Data_Person > persons_;
  int messagetype_;
  mutable int _cached_size_;
  friend struct ::protobuf_addressbook_2eproto::TableStruct;
  friend void ::protobuf_addressbook_2eproto::InitDefaultsDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data_Person_PhoneNumber

// string number = 1;
inline void Data_Person_PhoneNumber::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data_Person_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.Person.PhoneNumber.number)
  return number_.GetNoArena();
}
inline void Data_Person_PhoneNumber::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Data.Person.PhoneNumber.number)
}
#if LANG_CXX11
inline void Data_Person_PhoneNumber::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Data.Person.PhoneNumber.number)
}
#endif
inline void Data_Person_PhoneNumber::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Data.Person.PhoneNumber.number)
}
inline void Data_Person_PhoneNumber::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Data.Person.PhoneNumber.number)
}
inline ::std::string* Data_Person_PhoneNumber::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Data.Person.PhoneNumber.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data_Person_PhoneNumber::release_number() {
  // @@protoc_insertion_point(field_release:tutorial.Data.Person.PhoneNumber.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data_Person_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Data.Person.PhoneNumber.number)
}

// .tutorial.Data.Person.PhoneType type = 2;
inline void Data_Person_PhoneNumber::clear_type() {
  type_ = 0;
}
inline ::tutorial::Data_Person_PhoneType Data_Person_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.Person.PhoneNumber.type)
  return static_cast< ::tutorial::Data_Person_PhoneType >(type_);
}
inline void Data_Person_PhoneNumber::set_type(::tutorial::Data_Person_PhoneType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Data.Person.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Data_Person

// string name = 1;
inline void Data_Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data_Person::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.Person.name)
  return name_.GetNoArena();
}
inline void Data_Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Data.Person.name)
}
#if LANG_CXX11
inline void Data_Person::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Data.Person.name)
}
#endif
inline void Data_Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Data.Person.name)
}
inline void Data_Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Data.Person.name)
}
inline ::std::string* Data_Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Data.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data_Person::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.Data.Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data_Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Data.Person.name)
}

// int32 id = 2;
inline void Data_Person::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Data_Person::id() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.Person.id)
  return id_;
}
inline void Data_Person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Data.Person.id)
}

// string email = 3;
inline void Data_Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data_Person::email() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.Person.email)
  return email_.GetNoArena();
}
inline void Data_Person::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Data.Person.email)
}
#if LANG_CXX11
inline void Data_Person::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Data.Person.email)
}
#endif
inline void Data_Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Data.Person.email)
}
inline void Data_Person::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Data.Person.email)
}
inline ::std::string* Data_Person::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Data.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data_Person::release_email() {
  // @@protoc_insertion_point(field_release:tutorial.Data.Person.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data_Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Data.Person.email)
}

// .tutorial.Data.Person.PhoneNumber phones = 4;
inline bool Data_Person::has_phones() const {
  return this != internal_default_instance() && phones_ != NULL;
}
inline void Data_Person::clear_phones() {
  if (GetArenaNoVirtual() == NULL && phones_ != NULL) {
    delete phones_;
  }
  phones_ = NULL;
}
inline const ::tutorial::Data_Person_PhoneNumber& Data_Person::phones() const {
  const ::tutorial::Data_Person_PhoneNumber* p = phones_;
  // @@protoc_insertion_point(field_get:tutorial.Data.Person.phones)
  return p != NULL ? *p : *reinterpret_cast<const ::tutorial::Data_Person_PhoneNumber*>(
      &::tutorial::_Data_Person_PhoneNumber_default_instance_);
}
inline ::tutorial::Data_Person_PhoneNumber* Data_Person::release_phones() {
  // @@protoc_insertion_point(field_release:tutorial.Data.Person.phones)
  
  ::tutorial::Data_Person_PhoneNumber* temp = phones_;
  phones_ = NULL;
  return temp;
}
inline ::tutorial::Data_Person_PhoneNumber* Data_Person::mutable_phones() {
  
  if (phones_ == NULL) {
    phones_ = new ::tutorial::Data_Person_PhoneNumber;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Data.Person.phones)
  return phones_;
}
inline void Data_Person::set_allocated_phones(::tutorial::Data_Person_PhoneNumber* phones) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete phones_;
  }
  if (phones) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phones = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phones, submessage_arena);
    }
    
  } else {
    
  }
  phones_ = phones;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Data.Person.phones)
}

// -------------------------------------------------------------------

// Data_AddressBook

// .tutorial.Data.Person people = 1;
inline bool Data_AddressBook::has_people() const {
  return this != internal_default_instance() && people_ != NULL;
}
inline void Data_AddressBook::clear_people() {
  if (GetArenaNoVirtual() == NULL && people_ != NULL) {
    delete people_;
  }
  people_ = NULL;
}
inline const ::tutorial::Data_Person& Data_AddressBook::people() const {
  const ::tutorial::Data_Person* p = people_;
  // @@protoc_insertion_point(field_get:tutorial.Data.AddressBook.people)
  return p != NULL ? *p : *reinterpret_cast<const ::tutorial::Data_Person*>(
      &::tutorial::_Data_Person_default_instance_);
}
inline ::tutorial::Data_Person* Data_AddressBook::release_people() {
  // @@protoc_insertion_point(field_release:tutorial.Data.AddressBook.people)
  
  ::tutorial::Data_Person* temp = people_;
  people_ = NULL;
  return temp;
}
inline ::tutorial::Data_Person* Data_AddressBook::mutable_people() {
  
  if (people_ == NULL) {
    people_ = new ::tutorial::Data_Person;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Data.AddressBook.people)
  return people_;
}
inline void Data_AddressBook::set_allocated_people(::tutorial::Data_Person* people) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete people_;
  }
  if (people) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      people = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, people, submessage_arena);
    }
    
  } else {
    
  }
  people_ = people;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Data.AddressBook.people)
}

// -------------------------------------------------------------------

// Data

// .tutorial.Data.DataType messagetype = 1;
inline void Data::clear_messagetype() {
  messagetype_ = 0;
}
inline ::tutorial::Data_DataType Data::messagetype() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.messagetype)
  return static_cast< ::tutorial::Data_DataType >(messagetype_);
}
inline void Data::set_messagetype(::tutorial::Data_DataType value) {
  
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Data.messagetype)
}

// repeated .tutorial.Data.Person persons = 2;
inline int Data::persons_size() const {
  return persons_.size();
}
inline void Data::clear_persons() {
  persons_.Clear();
}
inline const ::tutorial::Data_Person& Data::persons(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Data.persons)
  return persons_.Get(index);
}
inline ::tutorial::Data_Person* Data::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Data.persons)
  return persons_.Mutable(index);
}
inline ::tutorial::Data_Person* Data::add_persons() {
  // @@protoc_insertion_point(field_add:tutorial.Data.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::Data_Person >*
Data::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Data.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Data_Person >&
Data::persons() const {
  // @@protoc_insertion_point(field_list:tutorial.Data.persons)
  return persons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tutorial::Data_Person_PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Data_Person_PhoneType>() {
  return ::tutorial::Data_Person_PhoneType_descriptor();
}
template <> struct is_proto_enum< ::tutorial::Data_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Data_DataType>() {
  return ::tutorial::Data_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_addressbook_2eproto__INCLUDED
